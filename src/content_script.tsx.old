console.log("Content script is running");

chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
	console.log("Receive message:", msg);
	if (msg.color) {
		console.log(`Receive color = ${msg.color}`);
		document.body.style.backgroundColor = msg.color;
		sendResponse(`Change color to ${msg.color}`);
	} else {
		sendResponse("Color message is none.");
	}
});

interface Tweet {
	ariaId: string;
	smartHash: number;
	text: string;
	element: HTMLElement;
}

async function extractPageElements() {
	// Exemple : récupérer tous les titres h1 de la page
	const toFilter = await chrome.storage.sync.get(["filterList"]);
	console.log(toFilter);

	const test: Tweet[] = [];
	const article = document.querySelectorAll('article[data-testid="tweet"]');
	for (const element of article || []) {
		if (!(element instanceof HTMLElement)) {
			continue;
		}
		const title = element.querySelector('[data-testid="tweetText"]');
		if (title) {
			console.log("Title:", title.textContent);
		}
		//<article aria-labelledby="" />
		const aria = element.attributes.getNamedItem("aria-labelledby")?.value;

		const tweet: Tweet = {
			smartHash: hashString(aria ?? ""),
			ariaId: aria ?? "",
			text: title?.textContent || "",
			element,
		};

		test.push(tweet);
		filterTweet(toFilter.filterList, tweet);
	}

	// Envoyer les données au service worker
	chrome.runtime.sendMessage({ action: "processData", data: test });
}

function filterTweet(filterList: string[], tweet: Tweet) {
	if (filterList.length === 0) {
		return;
	}

	// If the tweet contain words hide the text
	const words = tweet.text.split(" ");
	for (const word of words) {
		if (filterList.includes(word)) {
			// Background red
			tweet.element.style.backgroundColor = "red";
			console.log("Hide tweet:", tweet.smartHash);
			break;
		}
		if (tweet.element.textContent?.includes("Sponsorisé")) {
			tweet.element.style.backgroundColor = "green";
			console.log("Hide tweet:", tweet.smartHash);
			break;
		}
	}
}

function hashString(str: string) {
	let hash = 0;

	if (str.length === 0) return hash;
	for (let i = 0; i < str.length; i++) {
		const char = str.charCodeAt(i);
		hash = (hash << 5) - hash + char;
		hash = hash & hash;
	}

	return hash;
}

// Exécuter la fonction lorsque la page est chargée
document.addEventListener("copy", extractPageElements);
